题目一： 小易的升级之路

小易经常沉迷于网络游戏.有一次,他在玩一个打怪升级的游戏,他的角色的初始能力值为 a.在接下来的一段时间内,他将会依次遇见n个怪物,每个怪物的防御力为b1,b2,b3...bn. 如果遇到的怪物防御力bi小于等于小易的当前能力值c,那么他就能轻松打败怪物,并 且使得自己的能力值增加bi;如果bi大于c,那他也能打败怪物,但他的能力值只能增加bi 与c的最大公约数.那么问题来了,在一系列的锻炼后,小易的最终能力值为多少?
输入描述:
对于每组数据,第一行是两个整数n(1≤n<100000)表示怪物的数量和a表示小易的初始能力值.
第二行n个整数,b1,b2...bn(1≤bi≤n)表示每个怪物的防御力
输出描述:
对于每组数据,输出一行.每行仅包含一个整数,表示小易的最终能力值
输入例子:
3 50
50 105 200
5 20
30 20 15 40 100
输出例子:
110
205

代码：
    #include<cstdio>
    #include<cmath>
    #include<algorithm>
    #include<iostream>
    using namespace std;
    int gcb(int a,int b){
        int flag;
        while(b){
            flag = b;
            b = a%b;
            a = flag;
        }
        return a;
    }
    int main(){
    	int n,a;
        while(scanf("%d%d",&n,&a)!=EOF){
            for(int i=0;i<n;i++){
                int s;
                scanf("%d",&s);
                if(s<=a){
                    a += s;
                } else {
                    a += gcb(a,s);
                }
            }
            printf("%d\n",a);
        }
        return 0;
    }


题目二：[编程题] 炮台攻击
    兰博教训提莫之后,然后和提莫讨论起约德尔人,谈起约德尔人,自然少不了一个人,那 就是黑默丁格------约德尔人历史上最伟大的科学家. 提莫说,黑默丁格最近在思考一个问题:黑默丁格有三个炮台,炮台能攻击到距离它R的敌人 (两点之间的距离为两点连续的距离,例如(3,0),(0,4)之间的距离是5),如果一个炮台能攻击 到敌人,那么就会对敌人造成1×的伤害.黑默丁格将三个炮台放在N*M方格中的点上,并且给出敌人 的坐标. 问:那么敌人受到伤害会是多大?

    输入描述:
    第一行9个整数,R,x1,y1,x2,y2,x3,y3,x0,y0.R代表炮台攻击的最大距离,(x1,y1),(x2,y2),
    (x3,y3)代表三个炮台的坐标.(x0,y0)代表敌人的坐标.


    输出描述:
    输出一行,这一行代表敌人承受的最大伤害,(如果每个炮台都不能攻击到敌人,输出0×)

    输入例子:
    1 1 1 2 2 3 3 1 2

    输出例子:
    2x


代码：
    #include<cstdio>
    #include<cmath>
    #include<algorithm>
    #include<iostream>
    using namespace std;
    int sqr(int n){
    	return n*n;
    }
    int main(){
    	int R,a[6],b[6];
        while(scanf("%d",&R)!=EOF){
            for(int i=0;i<4;i++){
                scanf("%d%d",&a[i],&b[i]);
            }
            int count = 0;
            for(int i=0;i<3;i++){
                if(sqr(a[i]-a[3])+sqr(b[i]-b[3])<=sqr(R)){
                    ++ count;
                }
            }
            printf("%dx\n",count);
        }
        return 0;
    }

题目三：  扫描透镜
在N*M的草地上,提莫种了K个蘑菇,蘑菇爆炸的威力极大,兰博不想贸然去闯,而且蘑菇是隐形的.只 有一种叫做扫描透镜的物品可以扫描出隐形的蘑菇,于是他回了一趟战争学院,买了2个扫描透镜,一个 扫描透镜可以扫描出(3*3)方格中所有的蘑菇,然后兰博就可以清理掉一些隐形的蘑菇. 问:兰博最多可以清理多少个蘑菇?

输入描述:
第一行三个整数:N,M,K,(1≤N,M≤20,K≤100),N,M代表了草地的大小;
接下来K行,每行两个整数x,y(1≤x≤N,1≤y≤M).代表(x,y)处提莫种了一个蘑菇.
一个方格可以种无穷个蘑菇.


输出描述:
输出一行,在这一行输出一个整数,代表兰博最多可以清理多少个蘑菇.

思路：我认为这个是考矩阵的题。
网上参考：
    *首先，扩充矩阵N行N列(当N<3或M<3时，扩充其到3)方便处理
    *其次，每个扫描镜在每个格子内只能清理一个蘑菇。找到第一个扫描镜最大的区域后，该区域内的蘑菇数更新(每个格子减一)，同
        样处理第二个扫描镜即可。

代码：
    #include<cstdio>
    #include<cstring>
    #include<vector>
    #include<iostream>
    using namespace std;
    int count(vector<vector<int>> &v,int ax,int ay,int bx,int by){
        if(ax>bx || ay>by){
            return 0;
        }
        // 扫描每个格子内只能清理一个蘑菇
        int ss = 0;
        for(int i=ax;i<=bx;i++){
            for(int j=ay;j<=by;j++){
                ss = v[i][j]>0?(ss+1):ss;
            }
        }
        return ss;
    }
    int main(){
    	int N,M,K;
        while(scanf("%d%d%d",&N,&M,&K)!=EOF){
            if(N<3){
                N = 3;
            }
            if(M<3){
                M=3;
            }
            vector<vector<int>> v(N+1,vector<int>(M+1,0));
            for(int i=0;i<K;i++){
                int x,y;
                scanf("%d%d",&x,&y);
                ++v[x-1][x-1];
            }
            int begX=0;
            int begY=0;
            // 使用第一个扫描镜
            int maxNum = 0;
            int maxSum = 0;
            for(int i=0;i<=N-3;i++){
    			for(int j=0;j<=M-3;j++){
                    int num = count(v,i,j,i+2,j+2);
                    if(num>maxNum){
                        begX = i;
                        begY = j;
                        maxNum = num;
                    }
                }
            }
            maxSum += maxNum;

            // 第二个扫描镜
            for(int i = begX;i<begX+3;i++){
                for(int j = begY;j<begY+3;j++){
    				if(v[i][j]>0){
    					--v[i][j];
                    }
                }
            }
            maxNum = 0;
            for(int i=0;i<=N-3;i++){
    			for(int j=0;j<=M-3;j++){
                    int num = count(v,i,j,i+2,j+2);
                    if(num>maxNum){
                        begX = i;
                        begY = j;
                        maxNum = num;
                    }
                }
            }
            maxSum += maxNum;
            printf("%d\n",maxSum);
        }
        return 0;
    }

